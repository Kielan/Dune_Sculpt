/** Public API for DGraph **/

#pragma once

/* ************************************************* */

/* Dependency Graph */
struct DGraph;

/* ------------------------------------------------ */

struct CacheFile;
struct Collection;
struct CustomData_MeshMasks;
struct Id;
struct Main;
struct Object;
struct Scene;
struct Simulation;
struct DNodeTree;

#include "lib_sys_types.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Graph Building -------------------------------- */

/** Build dgraph for the given scene layer, and dump results in given graph container. */
void dgraph_build_from_view_layer(struct Depsgraph *graph);

/**
 * Build dgraph for all objects (so also invisible ones) in the given view layer.
 */
void dgraph_build_for_all_objects(struct Depsgraph *graph);

/**
 * Special version of builder which produces dependency graph suitable for the render pipeline.
 * It will contain sequencer and compositor (if needed) and all their dependencies.
 */
void dgraph_build_for_render_pipeline(struct Depsgraph *graph);

/**
 * Builds minimal dependency graph for compositor preview.
 *
 * Note that compositor editor might have pinned node tree, which is different from scene's node
 * tree.
 */
void dgraph_build_for_compositor_preview(struct DGraph *graph, struct DNodeTree *nodetree);

void dgraph_build_from_ids(struct DGraph *graph, struct Id **ids, int num_ids);

/** Tag relations from the given graph for update. */
void dgraph_tag_relations_update(struct DGraph *graph);

/** Create or update relations in the specified graph. */
void dgraph_relations_update(struct DGraph *graph);

/** Tag all relations in the database for update. */
void dgraph_relations_tag_update(struct Main *dmain);

/* Add Dependencies  ----------------------------- */

/**
 * Handle for components to define their dependencies from callbacks.
 * This is generated by the depsgraph and passed to dependency callbacks
 * as a symbolic reference to the current DepsNode.
 * All relations will be defined in reference to that node.
 */
struct DepsNodeHandle;

typedef enum eDGraphSceneComponentType {
  /* Parameters Component - Default when nothing else fits
   * (i.e. just SDNA property setting). */
  DGRAPH_SCENE_COMP_PARAMS,
  /* Animation Component
   * TODO: merge in with parameters? */
  DGRAPH_SCENE_COMP_ANIMATION,
  /* Sequencer Component (Scene Only). */
  DGRAPH_SCENE_COMP_SEQUENCER,
} eDGraphSceneComponentType;

typedef enum eDGraphObjectComponentType {
  /* Used in query API, to denote which component caller is interested in. */
  DGRAPH_OB_COMP_ANY,

  /* Parameters Component - Default when nothing else fits
   * (i.e. just SDNA property setting). */
  DGRAPH_OB_COMP_PARAMS,
  /* Animation Component.
   *
   * TODO: merge in with parameters? */
  DGRAPH_OB_COMP_ANIMATION,
  /* Transform Component (Parenting/Constraints) */
  DGRAPH_OB_COMP_TRANSFORM,
  /* Geometry Component (#Mesh / #DispList). */
  DGRAPH_OB_COMP_GEOMETRY,

  /* Evaluation-Related Outer Types (with Sub-data) */

  /* Pose Component - Owner/Container of Bones Eval */
  DGRAPH_OB_COMP_EVAL_POSE,
  /* Bone Component - Child/Sub-component of Pose */
  DGRAPH_OB_COMP_BONE,

  /* Material Shading Component */
  DGRAPH_OB_COMP_SHADING,
  /* Cache Component */
  DGRAPH_OB_COMP_CACHE,
} eDGraphObjectComponentType;

void dgraph_add_scene_relation(struct DGraphNodeHandle *node_handle,
                               struct Scene *scene,
                               eDGraphSceneComponentType component,
                               const char *description);
void dgraph_add_object_relation(struct DGrapgNodeHandle *node_handle,
                                struct Object *object,
                                eDGraphObjectComponentType component,
                                const char *description);
void dgraph_add_collection_geometry_relation(struct DGraphNodeHandle *node_handle,
                                             struct Collection *collection,
                                             const char *description);
void dgraph_add_collection_geometry_customdata_mask(struct DGraphNodeHandle *node_handle,
                                                   struct Collection *collection,
                                                   const struct CustomData_MeshMasks *masks);
void dgraph_add_simulation_relation(struct DGraphNodeHandle *node_handle,
                                    struct Simulation *simulation,
                                    const char *description);
void dgraph_add_node_tree_output_relation(struct DGraphNodeHandle *node_handle,
                                          struct DNodeTree *node_tree,
                                          const char *description);
void dgraph_add_bone_relation(struct DGraphNodeHandle *handle,
                              struct Object *object,
                              const char *bone_name,
                              eDGraphObjectComponentType component,
                              const char *description);
void dgraph_add_object_cache_relation(struct DGraphNodeHandle *handle,
                                      struct CacheFile *cache_file,
                                      eDGraphObjectComponentType component,
                                      const char *description);
/**
 * Adds relation from #DGRAPH_OPCODE_GENERIC_DATABLOCK_UPDATE of a given ID.
 * Is used for such entities as textures and images.
 */
void dgraph_add_generic_id_relation(struct DGraphNodeHandle *node_handle,
                                    struct Id *id,
                                    const char *description);

/**
 * Special function which is used from modifiers' updateDGraph() callback
 * to indicate that the modifier needs to know transformation of the object
 * which that modifier belongs to.
 * This function will take care of checking which operation is required to
 * have transformation for the modifier, taking into account possible simulation solvers.
 */
void dgraph_add_modifier_to_transform_relation(struct DGraphNodeHandle *node_handle,
                                               const char *description);

/**
 * Adds relations from the given component of a given object to the given node
 * handle AND the component to the point cache component of the node's ID.
 */
void dgraph_add_object_pointcache_relation(struct DGraphNodeHandle *node_handle,
                                        struct Object *object,
                                        eDGraphObjectComponentType component,
                                        const char *description);

void dgraph_add_special_eval_flag(struct DGraphNodeHandle *handle, struct ID *id, uint32_t flag);
void dgraph_add_customdata_mask(struct DGraphNodeHandle *handle,
                                struct Object *object,
                                const struct CustomData_MeshMasks *masks);

struct ID *DEG_get_id_from_handle(struct DepsNodeHandle *node_handle);
struct Depsgraph *DEG_get_graph_from_handle(struct DepsNodeHandle *node_handle);

bool DEG_object_has_geometry_component(struct Object *object);

/* ************************************************ */

#ifdef __cplusplus
} /* extern "C" */
#endif
